- platform: template
  sensors:
    cam_token:
      value_template: "{{ state_attr('camera.cr10_cam_esp', 'access_token') }}" 

- platform: command_line
  name: freeplayer
  command: "nc -zv 192.168.10.20 7000 2>&1 |grep -E 'open|succeeded'| wc -l"
  scan_interval: 5
     

- platform: template
  sensors:
    time:
      value_template: "{{ now().strftime('%H:%M') }}" 

- platform: template
  sensors:
    date_string:
      value_template: "{{ now().strftime('%d / %m / %y') }}" 

- platform: plex_recently_added
  token: !secret plex
  host: 192.168.10.40
  port: 32400


- platform: plex_recently_added
  name: Recently Added Movies # will create sensor.recently_added_movies
  token: !secret plex
  host: 192.168.10.40
  port: 32400
  section_types:
  - movie

- platform: plex_recently_added
  name: Recently Added TV  # will create sensor.recently_added_tv
  token: !secret plex
  host: 192.168.10.40
  port: 32400
  section_types:
  - show
      
#- platform: coinmarketcap
#  currency: 
#    - ethereum
#    - ripple
#    - litecoin

- platform: mqtt
  state_topic: 'plex'
  name: 'Plexpymqtt'
  value_template: '{{ value_json.body }}'

# - platform: blockchain
#   addresses:
#     - !secret blockchainwal

# - platform: bitcoin
#   display_options:
#     - exchangerate
#     - trade_volume_btc

# - platform: etherscan
#   address: !secret etherscanwal

# - platform: ripple
#   address: !secret ripplewal

- platform: darksky
  api_key: !secret darksky_api
  monitored_conditions:
    - summary
    - icon
    - nearest_storm_distance
    - temperature
    - humidity
    - precip_probability
    - precip_intensity
    - wind_speed
    - pressure
    - wind_bearing
    - apparent_temperature

- platform: template
  sensors:
    plextautulli:
      friendly_name: 'PlexHokageGano'
      value_template: '{{ states.sensor.tautulli.attributes.hokagegano["Activity"] }}'


- platform: template
  sensors:
    octotime:
      friendly_name: 'Temps restant'
      value_template: '{{ states("sensor.creality_cr10_time_remaining")|int / 60 }}'

# - platform: command_line
#   name: etheur
#   friendly_name: 'Cours ETH en Eur'
#   unit_of_measurement: 'EUR'
#   command: "cat /config/www/altcoins/cours_eth"

# - platform: command_line
#   name: vergeeur
#   icon: mdi:currency-btc
#   friendly_name: 'Cours Verge en Eur'
#   unit_of_measurement: 'EUR'
#   command: "cat /config/www/altcoins/cours_verge"

# - platform: command_line
#   name: ripeur
#   friendly_name: 'Cours XRP en Eur'
#   unit_of_measurement: 'EUR'
#   icon: mdi:coin
#   command: "cat /config/www/altcoins/cours_ripple"

# - platform: command_line
#   name: xemeur
#   friendly_name: 'Cours XEM en Eur'
#   unit_of_measurement: 'EUR'
#   command: "cat /config/www/altcoins/cours_xem"

# - platform: template
#   sensors:
#     gaineth:
#       friendly_name: 'Gain ETH'
#       unit_of_measurement: 'EUR'
#       value_template: '{{ float(states.sensor.etheur.state)* float(0.31340700)  - float(200.61) }}'

# - platform: template
#   sensors:
#     gainverge:
#       friendly_name: 'Gain Verge'
#       unit_of_measurement: 'EUR'
#       value_template: '{{ float(540.88677000) *  float(states.sensor.vergeeur.state)  - float(76.61) }}'


# - platform: template
#   sensors:
#     gainripple:
#       friendly_name: 'Gain Ripple'
#       unit_of_measurement: 'EUR'
#       value_template: '{{ float(states.sensor.ripeur.state) * float(states.sensor.ripple_balance.state)  - float(205.59) - float(100.61) }}'

# - platform: template
#   sensors:
#     gainxem:
#       friendly_name: 'Gain XEM'
#       unit_of_measurement: 'EUR'
#       value_template: '{{ float(114.27174) *  float(states.sensor.xemeur.state)  - float(100.61) }}'

# - platform: template
#   sensors:
#     gaintotal:
#       friendly_name: 'Gain Total'
#       unit_of_measurement: 'EUR'
#       value_template: '{{ float(states.sensor.gaineth.state) + float(states.sensor.gainripple.state) + float(states.sensor.gainxem.state) + float(states.sensor.gainverge.state) }}'



# One entry for each beacon you want to track
#- platform: mqtt_room
#  device_id: "2f234454cf6d4a0fadf2f4911ba9ffa6-1-1"
   # Note that major version must match, but any minor version will be ignored
#  name: 'arnaud'
#  state_topic: 'room_presence'
#  timeout: 10
#  away_timeout: 15

- platform: tautulli
  api_key: !secret tautulli
  host: 192.168.3.8

- platform: systemmonitor
  resources:
    - type: disk_use_percent
      arg: /home
    - type: memory_free
    - type: processor_use
    - type: memory_use

- platform: rest
  resource: http://192.168.3.50/api/newdeveloper/sensors/7
  value_template: '{{ value_json.state.lightlevel }}'
  unit_of_measurement: Lux
  name: 'Salon Lux'
  
- platform: rest
  resource: http://192.168.3.50/api/newdeveloper/sensors/5
  value_template: '{{ value_json.state.temperature | float / 100 }}'
  unit_of_measurement: °C
  name: 'Salon Temperature'

- platform: rest
  resource: http://192.168.3.50/api/newdeveloper/sensors/8
  value_template: '{{ value_json.state.status }}'
  name: 'Salon Motion'

- platform: template
  sensors:
    brightsalon:
      friendly_name: 'Brightness salon'
      value_template: '{{ states.light.salon_couleur.attributes.brightness }}'
      unit_of_measurement: 'km/h'

- binary_sensor:
  platform: command_line
  scan_interval: 30
  name: FreePlayer
  command: "bash /config/scripts/freeplayer.sh"
  payload_on: "Success"
  payload_off: "Fail"


- platform: template
  sensors:
    alarm_time:
      friendly_name: 'Time'
      value_template: '{{ "%0.02d:%0.02d" | format(states("input_number.alarmhour") | int, states("input_number.alarmminutes") | int) }}'

- platform: template
  sensors:
    vacuumalarm_time:
      friendly_name: 'Time'
      value_template: '{{ "%0.02d:%0.02d" | format(states("input_number.vacuumhour") | int, states("input_number.vacuuminutes") | int) }}'

- platform: template
  sensors:
    temperaturemaison:
      friendly_name: 'Temp en °C'
      value_template: '{{ (float(states.input_number.temperature.state)) | round(1) }}'


- platform: template
  sensors:
    luminositedim:
      friendly_name: 'Luminosite Salon'
      value_template: '{{ states.input_number.luminosite }}'

- platform: template
  sensors:
    alarmsensor:
      friendly_name: 'Etat de l Alarme'
      value_template: '{{ states.alarm_control_panel.ha_alarm.state }}'

- platform: template
  sensors:
    rdv_arno:
      friendly_name: 'Prochain Rdv'
      value_template: '{{ states.calendar.dalliesagmailcom.attributes.message }}'

- platform: template
  sensors:
    rdv_arno_h:
      friendly_name: 'Heure Rdv'
      value_template: '{{ states.calendar.dalliesagmailcom.attributes.start_time }}'

- platform: template
  sensors:
    rdv_contact:
      friendly_name: 'Les fetes anniversaire '
      value_template: '{{ states.calendar.contacts.attributes.message }}'

- platform: template
  sensors:
    rdv_contact_h:
      friendly_name: 'Date anniv'
      value_template: '{{ states.calendar.contacts.attributes.start_time }}'


- platform: template
  sensors:
    rdv_ferie:
      friendly_name: 'Prochain Jour Férié '
      value_template: '{{ states.calendar.jours_feries_en_france.attributes.message }}'

- platform: template
  sensors:
    rdv_ferie_h:
      friendly_name: 'Date jour férié'
      value_template: '{{ states.calendar.jours_feries_en_france.attributes.start_time }}'

- platform: template
  sensors:
    xiaomibat:
      friendly_name: 'batterie en %'
      value_template: '{{ states.vacuum.xiaomi_vacuum.attributes.battery_level }}'

- platform: template
  sensors:
    xiaomistat:
      friendly_name: 'status'
      value_template: '{{ states.vacuum.xiaomi_vacuum.attributes.status }}'

- platform: template
  sensors:
    xiaomicleantime:
      friendly_name: 'temps passé'
      value_template: '{{ states.vacuum.xiaomi_vacuum.attributes.cleaning_time }}'

- platform: template
  sensors:
    xiaomicleantimet:
      friendly_name: 'temps total passé'
      value_template: '{{ states.vacuum.xiaomi_vacuum.attributes.total_cleaning_time }}'

- platform: cert_expiry
  host: ganhome.duckdns.org

